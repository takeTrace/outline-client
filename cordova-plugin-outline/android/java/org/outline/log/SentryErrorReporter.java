// Copyright 2018 The Outline Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package org.outline.log;

import android.content.Context;
import android.util.Log;
import io.sentry.android.core.SentryAndroid;
import io.sentry.core.Breadcrumb;
import io.sentry.core.Sentry;
import io.sentry.core.SentryEvent;
import io.sentry.core.SentryLevel;
import io.sentry.core.protocol.Contexts;
import io.sentry.core.protocol.Device;
import io.sentry.core.protocol.Message;
import io.sentry.core.protocol.OperatingSystem;
import java.lang.IllegalStateException;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Queue;
import java.util.UUID;

/**
 * Wrapper class for the Sentry error reporting framework.
 */
class SentryErrorReporter {
  /**
   * Encapsulates a Sentry message.
   */
  private static class SentryMessage {
    private String msg;
    private SentryLevel level;
    SentryMessage(final String msg, SentryLevel level) {
      this.msg = msg;
      this.level = level;
    }
    public Breadcrumb toBreadcrumb() {
      final Breadcrumb breadcrumb = new Breadcrumb(msg);
      breadcrumb.setLevel(level);
      return breadcrumb;
    }
  }

  private static boolean isInitialized = false;

  // Queue of messages waiting to be sent once Sentry is initialized.
  private static Queue<SentryMessage> breadcrumbsQueue = new LinkedList<SentryMessage>();

  // Disallow instantiation in favor of a purely static class.
  private SentryErrorReporter() {}

  /**
   * Initializes the error reporting framework with the given credentials.
   * Configures an Android uncaught exception handler which sends events to Sentry.
   *
   * @param context Android application Context
   * @param dsn Sentry provided identifier
   * @throws IllegalStateException if has already been initialized.
   */
  public static void init(Context context, final String dsn) throws IllegalStateException {
    if (isInitialized) {
      throw new IllegalStateException("Error reporting framework already initiated");
    }
    SentryAndroid.init(context, options -> {
      options.setDsn(dsn);
      options.setBeforeSend(((event, hint) -> {
        try {
          return removeSentryEventPii(event);
        } catch (Exception e) {
          Log.e(SentryErrorReporter.class.getName(), "Failed to remove PII from Sentry event.", e);
        }
        // Don't send the event if we weren't able to remove PII.
        return null;
      }));
    });

    isInitialized = true;

    // Record all queued breadcrumbs.
    while (breadcrumbsQueue.size() > 0) {
      Sentry.addBreadcrumb(breadcrumbsQueue.remove().toBreadcrumb());
    }
  }

  /**
   * Sends previously recorded errors and messages to Sentry. Associate the report
   * with the provided event id.
   *
   * @param eventId, unique identifier i.e. the event id for a error report in raven-js.
   * @throws IllegalStateException if has not been initialized.
   */
  public static void send(final String eventId) throws IllegalStateException {
    if (!isInitialized) {
      throw new IllegalStateException("Error reporting framework not initiated");
    }
    final String uuid = eventId != null ? eventId : UUID.randomUUID().toString();
    // Associate this report with the event ID generated by Raven JS for cross-referencing. If the
    // ID is not present, use a random UUID to disambiguate the report message so it doesn't get
    // clustered with other reports. Clustering retains the report data on the server side, whereas
    // inactivity results in its deletion after 90 days.
    final SentryEvent event = new SentryEvent();
    final Message message = new Message();
    message.setMessage(String.format(Locale.ROOT, "Android report (%s)", uuid));
    event.setMessage(message);
    event.setTag("user_event_id", uuid);
    Sentry.captureEvent(event);
  }

  /**
   * Records an exception to be sent with the next error report.
   *
   * @param throwable, exception to record.
   */
  public static void recordException(Throwable throwable) throws IllegalStateException {
    recordErrorMessage(Log.getStackTraceString(throwable));
  }

  /**
   * Records a message with ERROR log level.
   *
   * @param msg, string to log
   */
  public static void recordErrorMessage(final String msg) throws IllegalStateException {
    recordMessage(msg, SentryLevel.ERROR);
  }

  /**
   * Records a message with WARNING log level.
   *
   * @param msg, string to log
   */
  public static void recordWarningMessage(final String msg) throws IllegalStateException {
    recordMessage(msg, SentryLevel.WARNING);
  }

  /**
   * Records a message with INFO log level.
   *
   * @param msg, string to log
   */
  public static void recordInfoMessage(final String msg) throws IllegalStateException {
    recordMessage(msg, SentryLevel.INFO);
  }

  // Record a log message to be sent with the next error report.
  private static void recordMessage(final String msg, SentryLevel level) {
    if (!isInitialized) {
      breadcrumbsQueue.add(new SentryMessage(msg, level));
      return;
    }
    final Breadcrumb breadcrumb = new Breadcrumb(msg);
    breadcrumb.setLevel(level);
    Sentry.addBreadcrumb(breadcrumb);
  }

  // Removes personally identifiably information and unnecessary metadata from a Sentry event.
  // Ensures that the Android device ID is not sent.
  private static SentryEvent removeSentryEventPii(final SentryEvent event) {
    final Contexts contexts = event.getContexts();
    final Device device = contexts.getDevice();
    device.setBootTime(null);
    device.setCharging(null);
    device.setExternalFreeStorage(null);
    device.setExternalStorageSize(null);
    device.setId(null);
    device.setOrientation(null);
    device.setScreenDensity(null);
    device.setScreenDpi(null);
    device.setScreenHeightPixels(null);
    device.setScreenResolution(null);
    device.setScreenWidthPixels(null);

    final OperatingSystem os = contexts.getOperatingSystem();
    os.setRooted(null);

    contexts.setDevice(device);
    contexts.setOperatingSystem(os);
    event.setContexts(contexts);
    event.setUser(null);
    event.removeTag("os.rooted");
    event.removeTag("user");
    return event;
  }
}
